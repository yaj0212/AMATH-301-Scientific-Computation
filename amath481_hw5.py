# -*- coding: utf-8 -*-
"""AMATH481-HW5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uN75EfW5rVwljqaWLWRUreB2VojRX68V
"""

# Problem 1
import numpy as np
import matplotlib.pyplot as plt

# u_t = -c * u_x
# u(0, x) = x + 1 for -1 <= x < = 0
# u(0, x) = 1 - x for 0 <= x < = 1
# u(0, x) = 0 o/w
# u(t, 10) = u(t, -10)
# u(t, x) = u0(x)
c = 3

x0 = -10
xf = 10
dx = 0.25
Nx = 81
x = np.linspace(x0, xf, Nx)
t0 = 0
tf = 3

def fa(x):
  return x + 1

def fb(x):
  return 1 - x

# 1a
dt = 0.1
Nt = int((tf - t0) / dt) + 1
t = np.linspace(t0, tf, Nt)

A = np.diag(np.ones(Nx - 2), 1) - np.diag(np.ones(Nx - 2), -1)
A[0, -1] = -1
A[-1, 0] = 1
A = (-c / (2 * dx)) * A

U = np.zeros((Nx, Nt))
for i in range(Nx - 1):
    if x[i] <= 0 and x[i] >= -1:
       U[i, 0] = fa(x[i])
    elif x[i] <= 1 and x[i] >= 0:
       U[i, 0] = fb(x[i])
    else:
        U[i, 0] = 0

# Forward Euler
for k in range(Nt - 1):
    U[:-1, (k + 1):(k + 2)] = U[:-1, k:(k + 1)] + dt * A @ U[:-1, k:(k + 1)]
U[-1, :] = U[0, :]

index_x = int((9 - x0) / dx)
index_t = Nt - 1
A1 = U[index_x, -1]
print("A1 = {}".format(A1))

# 1b
dt = 0.01
Nt = int((tf - t0) / dt) + 1
t = np.linspace(t0, tf, Nt)

A = np.diag(np.ones(Nx - 2), 1) - np.diag(np.ones(Nx - 2), -1)
A[0, -1] = -1
A[-1, 0] = 1
A = (-c / (2 * dx)) * A

U = np.zeros((Nx, Nt))
for i in range(Nx - 1):
  if x[i] <= 0 and x[i] >= -1:
    U[i, 0] = fa(x[i])
  elif x[i] <= 1 and x[i] >= 0:
    U[i, 0] = fb(x[i])
  else:
    U[i, 0] = 0
#U[36:41, 0] = x[36:41] + 1
#U[40:45, 0] = 1 - x[40:45]

# Forward Euler
for k in range(Nt - 1):
    U[:-1, (k + 1):(k + 2)] = U[:-1, k:(k + 1)] + dt * A @ U[:-1, k:(k + 1)]
U[-1, :] = U[0, :]

A2 = U[index_x, -1]
print("A2 = {}".format(A2))

# 1c
dt = 0.1
Nt = int((tf - t0) / dt) + 1
t = np.linspace(t0, tf, Nt)

A = np.diag(np.ones(Nx - 2), 1) - np.diag(np.ones(Nx - 2), -1)
A[0, -1] = -1
A[-1, 0] = 1
A = (-c / (2 * dx)) * A

U = np.zeros((Nx, Nt))
for i in range(Nx - 1):
  if x[i] <= 0 and x[i] >= -1:
    U[i, 0] = fa(x[i])
  elif x[i] <= 1 and x[i] >= 0:
    U[i, 0] = fb(x[i])
  else:
    U[i, 0] = 0

# Trapezoidal
A_trap1 = np.eye(Nx - 1) - (dt/2) * A
A_trap2 = np.eye(Nx - 1) + (dt/2) * A
for k in range(Nt - 1):
  U[:-1, (k + 1):(k + 2)] = np.linalg.solve(A_trap1, A_trap2 @ U[:-1, k:(k + 1)])
U[-1, :] = U[0, :]

A3 = U[index_x, -1]
print("A3 = {}".format(A3))

# 1d
dt = 0.01
Nt = int((tf - t0) / dt) + 1
t = np.linspace(t0, tf, Nt)

A = np.diag(np.ones(Nx - 2), 1) - np.diag(np.ones(Nx - 2), -1)
A[0, -1] = -1
A[-1, 0] = 1
A = (-c / (2 * dx)) * A

U = np.zeros((Nx, Nt))
for i in range(Nx - 1):
  if x[i] <= 0 and x[i] >= -1:
    U[i, 0] = fa(x[i])
  elif x[i] <= 1 and x[i] >= 0:
    U[i, 0] = fb(x[i])
  else:
    U[i, 0] = 0

# Trapezoidal
A_trap1 = np.eye(Nx - 1) - (dt/2) * A
A_trap2 = np.eye(Nx - 1) + (dt/2) * A
for k in range(Nt - 1):
  U[:-1, (k + 1):(k + 2)] = np.linalg.solve(A_trap1, A_trap2 @ U[:-1, k:(k + 1)])
U[-1, :] = U[0, :]

A4 = U[index_x, -1]
print("A4 = {}".format(A4))

# 1e
dt = 0.1
Nt = int((tf - t0) / dt) + 1
t = np.linspace(t0, tf, Nt)

A = np.diag(np.ones(Nx - 2), 1) - np.diag(np.ones(Nx - 2), -1)
A[0, -1] = -1
A[-1, 0] = 1
A = (-c / (2 * dx)) * A

U = np.zeros((Nx, Nt))
for i in range(Nx - 1):
  if x[i] <= 0 and x[i] >= -1:
    U[i, 0] = fa(x[i])
  elif x[i] <= 1 and x[i] >= 0:
    U[i, 0] = fb(x[i])
  else:
    U[i, 0] = 0

# Midpoint
A_trap1 = np.eye(Nx - 1) - (dt/2) * A
A_trap2 = np.eye(Nx - 1) + (dt/2) * A
U[:-1, 1: 2] = np.linalg.solve(A_trap1, A_trap2 @ U[:-1, : 1])
for k in range(1, Nt - 1):
  U[:-1, (k + 1):(k + 2)] = U[:-1, (k - 1):k] + 2 * dt * A @ U[:-1, k:(k + 1)]
U[-1, :] = U[0, :]

A5 = U[index_x, -1]
print("A5 = {}".format(A5))

# 1f
dt = 0.01
Nt = int((tf - t0) / dt) + 1
t = np.linspace(t0, tf, Nt)

A = np.diag(np.ones(Nx - 2), 1) - np.diag(np.ones(Nx - 2), -1)
A[0, -1] = -1
A[-1, 0] = 1
A = (-c / (2 * dx)) * A

U = np.zeros((Nx, Nt))
for i in range(Nx - 1):
  if x[i] <= 0 and x[i] >= -1:
    U[i, 0] = fa(x[i])
  elif x[i] <= 1 and x[i] >= 0:
    U[i, 0] = fb(x[i])
  else:
    U[i, 0] = 0

# Midpoint
A_trap1 = np.eye(Nx - 1) - (dt/2) * A
A_trap2 = np.eye(Nx - 1) + (dt/2) * A
U[:-1, 1: 2] = np.linalg.solve(A_trap1, A_trap2 @ U[:-1, : 1])
for k in range(1, Nt - 1):
  U[:-1, (k + 1):(k + 2)] = U[:-1, (k - 1):k] + 2 * dt * A @ U[:-1, k:(k + 1)]
U[-1, :] = U[0, :]

A6 = U[index_x, -1]
print("A6 = {}".format(A6))

# 1g
dt = 0.1
Nt = int((tf - t0) / dt) + 1
t = np.linspace(t0, tf, Nt)

A = np.diag(np.ones(Nx - 2), 1) - np.diag(np.ones(Nx - 2), -1)
A[0, -1] = -1
A[-1, 0] = 1
A = (-c / (2 * dx)) * A

U = np.zeros((Nx, Nt))
for i in range(Nx - 1):
  if x[i] <= 0 and x[i] >= -1:
    U[i, 0] = fa(x[i])
  elif x[i] <= 1 and x[i] >= 0:
    U[i, 0] = fb(x[i])
  else:
    U[i, 0] = 0

# Lax-Friedrichs
B = np.diag(np.ones(Nx - 2), 1) + np.diag(np.ones(Nx - 2), -1)
B[0, -1] = 1
B[-1, 0] = 1
B = B / 2
for k in range(Nt - 1):
  U[:-1, (k + 1):(k + 2)] = B @ U[:-1, k:(k + 1)] + dt * A @ U[:-1, k:(k + 1)]
U[-1, :] = U[0, :]

A7 = U[index_x, -1]
print("A7 = {}".format(A7))

# 1h
dt = 0.01
Nt = int((tf - t0) / dt) + 1
t = np.linspace(t0, tf, Nt)

A = np.diag(np.ones(Nx - 2), 1) - np.diag(np.ones(Nx - 2), -1)
A[0, -1] = -1
A[-1, 0] = 1
A = (-c / (2 * dx)) * A

U = np.zeros((Nx, Nt))
for i in range(Nx - 1):
  if x[i] <= 0 and x[i] >= -1:
    U[i, 0] = fa(x[i])
  elif x[i] <= 1 and x[i] >= 0:
    U[i, 0] = fb(x[i])
  else:
    U[i, 0] = 0

# Lax-Friedrichs
B = np.diag(np.ones(Nx - 2), 1) + np.diag(np.ones(Nx - 2), -1)
B[0, -1] = 1
B[-1, 0] = 1
B = B / 2
for k in range(Nt - 1):
  U[:-1, (k + 1):(k + 2)] = B @ U[:-1, k:(k + 1)] + dt * A @ U[:-1, k:(k + 1)]
U[-1, :] = U[0, :]

A8 = U[index_x, -1]
print("A8 = {}".format(A8))

# Problem 2
import numpy as np
import matplotlib.pyplot as plt

x0 = 0
xf = 2 * np.pi
dx = 2 * np.pi / 100
Nx = 101
x = np.linspace(x0, xf, Nx)
t0 = 0
tf = 8

def coefficient(x):
  return 0.2 + np.sin(x - 1) ** 2

def u0(x):
  return np.cos(x)

# 2a
dt = 1
Nt = int((tf - t0) / dt) + 1
t = np.linspace(t0, tf, Nt)

A = np.diag(np.ones(Nx - 2), 1) - np.diag(np.ones(Nx - 2), -1)
A[0, -1] = -1
A[-1, 0] = 1
for i in range(Nx - 1):
  A[i, :] = (-coefficient(x[i]) / (2 * dx)) * A[i, :]

U = np.zeros((Nx, Nt))
U[:-1, 0] = u0(x[:-1])

# Backward Euler
for k in range(Nt - 1):
  U[:-1, (k + 1):(k + 2)] = np.linalg.solve(np.eye(Nx - 1) - dt * A, U[:-1, k:(k + 1)])
U[-1, :] = U[0, :]

index_x = int((np.pi - x0) / dx) + 1
index_t = int((4 - t0) / dt)
A9 = U[index_x, index_t]
print("A9 = {}".format(A9))

# 2b
dt = 0.01
Nt = int((tf - t0) / dt) + 1
t = np.linspace(t0, tf, Nt)

A = np.diag(np.ones(Nx - 2), 1) - np.diag(np.ones(Nx - 2), -1)
A[0, -1] = -1
A[-1, 0] = 1
for i in range(Nx - 1):
  A[i, :] = (-coefficient(x[i]) / (2 * dx)) * A[i, :]

U = np.zeros((Nx, Nt))
U[:-1, 0] = u0(x[:-1])

# Backward Euler
for k in range(Nt - 1):
  U[:-1, (k + 1):(k + 2)] = np.linalg.solve(np.eye(Nx - 1) - dt * A, U[:-1, k:(k + 1)])
U[-1, :] = U[0, :]

index_x = int((np.pi - x0) / dx) + 1
index_t = int((4 - t0) / dt)
A10 = U[index_x, index_t]
print("A10 = {}".format(A10))

# 2c
dt = 1
Nt = int((tf - t0) / dt) + 1
t = np.linspace(t0, tf, Nt)

A = np.diag(np.ones(Nx - 2), 1) - np.diag(np.ones(Nx - 2), -1)
A[0, -1] = -1
A[-1, 0] = 1
for i in range(Nx - 1):
  A[i, :] = (-coefficient(x[i]) / (2 * dx)) * A[i, :]

U = np.zeros((Nx, Nt))
U[:-1, 0] = u0(x[:-1])

# Trapezoidal
A_trap1 = np.eye(Nx - 1) - (dt/2) * A
A_trap2 = np.eye(Nx - 1) + (dt/2) * A
for k in range(Nt - 1):
  U[:-1, (k + 1):(k + 2)] = np.linalg.solve(A_trap1, A_trap2 @ U[:-1, k:(k + 1)])
U[-1, :] = U[0, :]

index_x = int((np.pi - x0) / dx) + 1
index_t = int((4 - t0) / dt)
A11 = U[index_x, index_t]
print("A11 = {}".format(A11))

# 2d
dt = 0.01
Nt = int((tf - t0) / dt) + 1
t = np.linspace(t0, tf, Nt)

A = np.diag(np.ones(Nx - 2), 1) - np.diag(np.ones(Nx - 2), -1)
A[0, -1] = -1
A[-1, 0] = 1
for i in range(Nx - 1):
  A[i, :] = (-coefficient(x[i]) / (2 * dx)) * A[i, :]

U = np.zeros((Nx, Nt))
U[:-1, 0] = u0(x[:-1])

# Trapezoidal
A_trap1 = np.eye(Nx - 1) - (dt/2) * A
A_trap2 = np.eye(Nx - 1) + (dt/2) * A
for k in range(Nt - 1):
  U[:-1, (k + 1):(k + 2)] = np.linalg.solve(A_trap1, A_trap2 @ U[:-1, k:(k + 1)])
U[-1, :] = U[0, :]

index_x = int((np.pi - x0) / dx) + 1
index_t = int((4 - t0) / dt)
A12 = U[index_x, index_t]
print("A12 = {}".format(A12))

# 2e
dt = 0.05
Nt = int((tf - t0) / dt) + 1
t = np.linspace(t0, tf, Nt)

A = np.diag(np.ones(Nx - 2), 1) - np.diag(np.ones(Nx - 2), -1)
A[0, -1] = -1
A[-1, 0] = 1
for i in range(Nx - 1):
  A[i, :] = (-coefficient(x[i]) / (2 * dx)) * A[i, :]

U = np.zeros((Nx, Nt))
U[:-1, 0] = u0(x[:-1])

# Midpoint
A_trap1 = np.eye(Nx - 1) - (dt/2) * A
A_trap2 = np.eye(Nx - 1) + (dt/2) * A
U[:-1, 1: 2] = np.linalg.solve(A_trap1, A_trap2 @ U[:-1, : 1])
for k in range(1, Nt - 1):
  U[:-1, (k + 1):(k + 2)] = U[:-1, (k - 1):k] + 2 * dt * A @ U[:-1, k:(k + 1)]
U[-1, :] = U[0, :]

index_x = int((np.pi - x0) / dx) + 1
index_t = int((4 - t0) / dt)
A13 = U[index_x, index_t]
print("A13 = {}".format(A13))

# 2f
dt = 0.01
Nt = int((tf - t0) / dt) + 1
t = np.linspace(t0, tf, Nt)

A = np.diag(np.ones(Nx - 2), 1) - np.diag(np.ones(Nx - 2), -1)
A[0, -1] = -1
A[-1, 0] = 1
for i in range(Nx - 1):
  A[i, :] = (-coefficient(x[i]) / (2 * dx)) * A[i, :]

U = np.zeros((Nx, Nt))
U[:-1, 0] = u0(x[:-1])

# Midpoint
A_trap1 = np.eye(Nx - 1) - (dt/2) * A
A_trap2 = np.eye(Nx - 1) + (dt/2) * A
U[:-1, 1: 2] = np.linalg.solve(A_trap1, A_trap2 @ U[:-1, : 1])
for k in range(1, Nt - 1):
  U[:-1, (k + 1):(k + 2)] = U[:-1, (k - 1):k] + 2 * dt * A @ U[:-1, k:(k + 1)]
U[-1, :] = U[0, :]

index_x = int((np.pi - x0) / dx) + 1
index_t = int((4 - t0) / dt)
A14 = U[index_x, index_t]
print("A14 = {}".format(A14))

# 2g
dt = 0.05
Nt = int((tf - t0) / dt) + 1
t = np.linspace(t0, tf, Nt)

A = np.diag(np.ones(Nx - 2), 1) - np.diag(np.ones(Nx - 2), -1)
A[0, -1] = -1
A[-1, 0] = 1
for i in range(Nx - 1):
  A[i, :] = (-coefficient(x[i]) / (2 * dx)) * A[i, :]

U = np.zeros((Nx, Nt))
U[:-1, 0] = u0(x[:-1])

# Lax-Friedrichs
B = np.diag(np.ones(Nx - 2), 1) + np.diag(np.ones(Nx - 2), -1)
B[0, -1] = 1
B[-1, 0] = 1
B = B / 2
for k in range(Nt - 1):
  U[:-1, (k + 1):(k + 2)] = B @ U[:-1, k:(k + 1)] + dt * A @ U[:-1, k:(k + 1)]
U[-1, :] = U[0, :]

index_x = int((np.pi - x0) / dx) + 1
index_t = int((4 - t0) / dt)
A15 = U[index_x, index_t]
print("A15 = {}".format(A15))

# 2h
dt = 0.01
Nt = int((tf - t0) / dt) + 1
t = np.linspace(t0, tf, Nt)

A = np.diag(np.ones(Nx - 2), 1) - np.diag(np.ones(Nx - 2), -1)
A[0, -1] = -1
A[-1, 0] = 1
for i in range(Nx - 1):
  A[i, :] = (-coefficient(x[i]) / (2 * dx)) * A[i, :]

U = np.zeros((Nx, Nt))
U[:-1, 0] = u0(x[:-1])

# Lax-Friedrichs
B = np.diag(np.ones(Nx - 2), 1) + np.diag(np.ones(Nx - 2), -1)
B[0, -1] = 1
B[-1, 0] = 1
B = B / 2
for k in range(Nt - 1):
  U[:-1, (k + 1):(k + 2)] = B @ U[:-1, k:(k + 1)] + dt * A @ U[:-1, k:(k + 1)]
U[-1, :] = U[0, :]

index_x = int((np.pi - x0) / dx) + 1
index_t = int((4 - t0) / dt)
A16 = U[index_x, index_t]
print("A16 = {}".format(A16))

# Problem 3
import numpy as np
import matplotlib.pyplot as plt

x0 = 0
xf = 25
dx = 0.05
Nx = 501
x = np.linspace(x0, xf, Nx)
t0 = 0
tf = 17
dt = 1 / 22
Nt = 375
t = np.linspace(t0, tf, Nt)

c = 1

# Initial condition
def u0(x):
  return np.exp(-20 * (x - 2)**2) + np.exp(-(x - 5)**2)


# True solution at t = 17
def true_solution(t, x):
  return np.exp(-20 * (x - 2 - t)**2) + np.exp(-(x - 5 - t)**2)
  # return u0(np.mod(x - c * t, 1))

A = np.diag(np.ones(Nx - 2), 1) - np.diag(np.ones(Nx - 2), -1)
A[0, -1] = -1
A[-1, 0] = 1
A = (-c / (2 * dx)) * A

U = np.zeros((Nx, Nt))
U[:, 0] = u0(x)

# 3a
B = np.diag(np.ones(Nx - 2), 1) + np.diag(np.ones(Nx - 2), -1)
B[0, -1] = 1
B[-1, 0] = 1
B = B / 2

for k in range(Nt - 1):
    U[:-1, (k + 1):(k + 2)] = B @ U[:-1, k:(k + 1)] + dt * A @ U[:-1, k:(k + 1)]
U[-1, :] = U[0, :]

index_t = Nt - 1
index_x = int((19 - x0) / dx)
A17 = U[index_x, -1]
print("A17 = {}".format(A17))

T, X = np.meshgrid(t, x, indexing = 'ij')
true_sol = np.transpose(true_solution(T, X))

plot_rows = 3
plot_cols = 3
num_plots = plot_rows * plot_cols
t_plot = np.linspace(t0, tf, num_plots)

fig = plt.figure()
fig.suptitle("True Solution")
for j, tval in enumerate(t_plot):
    k = round(tval / dt)
    ax = fig.add_subplot(plot_rows, plot_cols, j + 1)
    ax.set_title("t = {:.2f}".format(tval))
    ax.plot(x, true_solution(tval, x))
    ax.set_ylim((-1, 1))
plt.subplots_adjust(hspace=0.5)
plt.show()

fig = plt.figure()
fig.suptitle("Lax-Friedrichs")
for j, tval in enumerate(t_plot):
    k = round(tval / dt)
    ax = fig.add_subplot(plot_rows, plot_cols, j + 1)
    ax.set_title("t = {:.2f}".format(tval))
    ax.plot(x, U[:, k])
plt.subplots_adjust(hspace=0.5)
plt.show()

plt.plot(x, U[:, -1], label='Lax-Friedrichs')
plt.plot(x, true_sol[:, -1], label='True Solution')
plt.xlabel('x')
plt.ylabel('u(17, x)')
plt.legend()
plt.title('Lax-Friedrichs Method vs. True Solution of u(17, x) ')
plt.show()

# 3b
A_mid1 = (np.eye(Nx - 1) - (dt / 2) * A)
A_mid2 = (np.eye(Nx - 1) + (dt / 2) * A)
U[:-1, 1: 2] = np.linalg.solve(A_mid1, A_mid2 @ U[:-1, : 1])
for k in range(1, Nt - 1):
    U[:-1, (k + 1):(k + 2)] = U[:-1, (k - 1):k] + 2 * dt * A @ U[:-1, k:(k + 1)]
U[-1, :] = U[0, :]
A18 = U[index_x, -1]
print("A18 = {}".format(A18))

fig = plt.figure()
fig.suptitle("Midpoint")
for j, tval in enumerate(t_plot):
    k = round(tval / dt)
    ax = fig.add_subplot(plot_rows, plot_cols, j + 1)
    ax.set_title("t = {:.2f}".format(tval))
    ax.plot(x, U[:, k])
plt.subplots_adjust(hspace=0.5)
plt.show()

plt.plot(x, U[:, -1], label='Midpoint', linewidth = 2)
plt.plot(x, true_sol[:, -1], label='True Solution', linewidth = 1)
plt.xlabel('x')
plt.ylabel('u(17, x)')
plt.legend()
plt.title('Midpoint Method vs. True Solution of u(17, x) ')
plt.show()